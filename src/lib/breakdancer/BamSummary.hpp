#pragma once

#include "LibraryFlagDistribution.hpp"
#include "BamConfig.hpp"
#include "IBamReader.hpp"
#include <vector>

class BamSummary {
    private:
        ConfigMap<std::string, uint32_t>::type _read_count_per_bam;
        uint32_t _covered_ref_len;
        std::vector<LibraryFlagDistribution> _library_flag_distribution;

    public:
        //need a constructor
        //it should construct flag distribution from what's in BamConfig. Also should be bam list from there and call analyze_bam for each bamfile
        void analyze_bam(IBamReader& reads, Options const& opts, BamConfig const& bam_config, int number = -1);

        uint32_t covered_reference_length() const {
            return _covered_ref_len;
        }

        uint32_t read_count_in_bam(std::string const& key) const {
            return _read_count_per_bam.at(key);
        }

};

/*
   class LibraryInsertSizeAnalyzer : LibraryAnalyzer {
   private:
   void _analyze_read(Read const& aln);
   };
   */

//what we want is to do two things
//1. Accumulate information about both the counts of the flag types and the total number of types in the libraries
//2. Accumulate information about the insert sizes
//
//Both access the same alignments, but retain different information
//Both operate on, up to, the entire BAM
//Both store information about each library
//
//For example, insert size histogram would be generated by:
//1. Recording count information
//2. Recording insert size information
//
//If a config file has been provided, then that would have insert size metrics and those would need to be provided and used to set flags
